/* Copyright (c) 2007-2017 MIT 6.005 course staff, all rights reserved.
 * Redistribution of original or derived work requires permission of course staff.
 */
package minesweeper;

import minesweeper.*;
import java.io.*;

/**
 * TODO: Specification
 */
public class Board {
    
    //rep
    private final BoardSquare[] board;
    private final int rows;
    private final int columns;
    
    // Abstraction function:
    // the board array of BoardSqures represents the minesweeper board state in which element 0 represents board square at 0,0
    // the board squares for each row occurs consecutively in the character array; 
    // rows equals the number of rows in the board
    // columns represents the number of columns of the board
    // so, for example, the boardsquare at 3, 2 where 3 is the row and 2 is the column will be at 
    // the element (3 + 1) * (columns) + 2 + 1;
    // an element of board can be either "-" for untouched, "F" for flagged, " "(space) for dug and 0 neighbors with bomb
    
    // Rep Invariant:
    // 0 < rows;
    // 0 < columns;
    // rows = columns;
    
    // TODO: Abstraction function, rep invariant, rep exposure, thread safety
    
    Board( int rows, int columns){
        this.rows = rows;
        this.columns = columns;
        board = null; //initialize();
    }
    
    Board (int rows, int columns, File file){
        this.rows =rows;
        this.columns = columns;
        board = null;
        
    }
    
    public String look(){
        String result = "";
        for( int j= 0; j < rows; j++){
            for( int i = 0; i < columns; i++){
                result = result + board[(j * rows) + columns].getState();
            }
            result = result + "%n";
        }
        
        return result;
    }
    
    public boolean dig(int x, int y){
        
        //check if square is on board
        if ((x<0) || (x >= rows) || (y < 0) || (y >= columns)) return false;
        
        //get square
        BoardSquare square = board[(rows *x) + y];
        //check if square is untouched
        if (square.getState() != '-') return false;
        //process dig request
        if (square.getBomb()){
            square.setBomb(false);
            if(square.getProximityBombs() != 0) square.setState(Integer.toString(square.getProximityBombs()).charAt(0));
            removeBomb(x, y);
            return true;
            
        }
    }
    
    private void removeBomb(int x, int y){
        for (int j = x-1; j <= x+1; j++){
            for (int i = y-1; i <= y+1; i++){
                if ((x<0) || (x >= rows) || (y < 0) || (y >= columns)) break;
                BoardSquare square = board[(j*columns) + i];
                int bombs = square.getProximityBombs();
                square.setProximityBombs(bombs - 1);
                
            }
        }
    }
     
    
    // TODO: Specify, test, and implement in problem 2
    
}
